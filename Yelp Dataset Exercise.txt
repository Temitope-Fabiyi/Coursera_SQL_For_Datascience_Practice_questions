Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table =  10000
ii. Business table =  10000
iii. Category table = 10000
iv. Checkin table =   10000
v. elite_years table =10000
vi. friend table =    10000
vii. hours table =    10000
viii. photo table =   10000
ix. review table =    10000
x. tip table =        10000
xi. user table =      10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours =   1562
iii.Category =2643
iv.Attribute =1115
v. Review =   10000
vi. Checkin = 493
vii. Photo =  10000
viii. Tip =   537
ix. User =    10000
x. Friend =   11
xi. Elite_years =2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer:No
	
	
	SQL code used to arrive at answer:

	SELECT columnName AS ABC
  	-- change the columnName to to each columns in the user table of the dataset
	FROM user
	WHERE ABC IS NULL;
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:1		max:5		avg:3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:1.0		max:5.0		avg:3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:0		max:2		avg:0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:1		max:53		avg:1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:0		max:2000		avg:24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

	SELECT city, SUM(review_count) AS 'total_reviews'
	FROM business
	GROUP BY city
	ORDER BY total_reviews DESC;
	
	
	Copy and Paste the Result Below:
+-----------------+---------------+
| city            | total_reviews |
+-----------------+---------------+
| Las Vegas       |         82854 |
| Phoenix         |         34503 |
| Toronto         |         24113 |
| Scottsdale      |         20614 |
| Charlotte       |         12523 |
| Henderson       |         10871 |
| Tempe           |         10504 |
| Pittsburgh      |          9798 |
| Montréal        |          9448 |
| Chandler        |          8112 |
| Mesa            |          6875 |
| Gilbert         |          6380 |
| Cleveland       |          5593 |
| Madison         |          5265 |
| Glendale        |          4406 |
| Mississauga     |          3814 |
| Edinburgh       |          2792 |
| Peoria          |          2624 |
| North Las Vegas |          2438 |
| Markham         |          2352 |
| Champaign       |          2029 |
| Stuttgart       |          1849 |
| Surprise        |          1520 |
| Lakewood        |          1465 |
| Goodyear        |          1155 |
+-----------------+---------------+
(Output limit exceeded, 25 of 362 total rows shown)
	

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
SELECT stars AS 'Star_Rating', COUNT(id) AS 'Count'
FROM business
WHERE city = 'Avon'
GROUP BY stars;


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------------+-------+
| Star Rating | Count |
+-------------+-------+
|         1.5 |     1 |
|         2.5 |     2 |
|         3.5 |     3 |
|         4.0 |     2 |
|         4.5 |     1 |
|         5.0 |     1 |
+-------------+-------+


ii. Beachwood

SQL code used to arrive at answer:
SELECT stars AS 'Star_Rating', COUNT(id) AS 'Count'
FROM business
WHERE city = 'Beachwood'
GROUP BY stars;


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------------+-------+
| Star_Rating | Count |
+-------------+-------+
|         2.0 |     1 |
|         2.5 |     1 |
|         3.0 |     2 |
|         3.5 |     2 |
|         4.0 |     1 |
|         4.5 |     2 |
|         5.0 |     5 |
+-------------+-------+
		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	SELECT name, review_count
	FROM user
	ORDER BY review_count DESC
	LIMIT 3;
	
		
	Copy and Paste the Result Below:
+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+	


8. Does posing more reviews correlate with more fans?
	YES, However this is not 100% directly proportionate

	Please explain your findings and interpretation of the results:
	So comparing reviews with number of fans;
	SELECT id,
	       name,
	       review_count,
	       fans,
	       yelping_since
	FROM user
	ORDER BY review_count DESC
+------------------------+-----------+--------------+------+---------------------+
| id                     | name      | review_count | fans | yelping_since       |
+------------------------+-----------+--------------+------+---------------------+
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |         2000 |  253 | 2012-12-16 00:00:00 |
| -3s52C4zL_DHRK0ULG6qtg | Sara      |         1629 |   50 | 2010-05-16 00:00:00 |
| -8lbUNlXVSoXqaRRiHiSNg | Yuri      |         1339 |   76 | 2008-01-03 00:00:00 |
| -K2Tcgh2EKX6e6HqqIrBIQ | .Hon      |         1246 |  101 | 2006-07-19 00:00:00 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |         1215 |  126 | 2015-02-19 00:00:00 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |         1153 |  311 | 2012-11-27 00:00:00 |
| -gokwePdbXjfS0iF7NsUGA | eric      |         1116 |   16 | 2007-05-27 00:00:00 |
| -DFCC64NXgqrxlO8aLU5rg | Roanna    |         1039 |  104 | 2006-03-28 00:00:00 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |          968 |  497 | 2011-03-30 00:00:00 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |          930 |  173 | 2009-07-08 00:00:00 |
| -fUARDNuXAfrOn4WLSZLgA | Ed        |          904 |   38 | 2009-08-10 00:00:00 |
| -hKniZN2OdshWLHYuj21jQ | Nicole    |          864 |   43 | 2006-08-02 00:00:00 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |          862 |  124 | 2012-04-05 00:00:00 |
| -B-QEUESGWHPE_889WJaeg | Mark      |          861 |  115 | 2009-05-31 00:00:00 |
| -kLVfaJytOJY2-QdQoCcNQ | Christina |          842 |   85 | 2012-10-08 00:00:00 |
| -kO6984fXByyZm3_6z2JYg | Dominic   |          836 |   37 | 2011-02-06 00:00:00 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |          834 |  120 | 2007-08-14 00:00:00 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |          813 |  159 | 2009-10-05 00:00:00 |
| -l9giG8TSDBG1jnUBUXp5w | Alison    |          775 |   61 | 2007-07-02 00:00:00 |
| -dw8f7FLaUmWR7bfJ_Yf0w | Sui       |          754 |   78 | 2009-09-07 00:00:00 |
| -AaBjWJYiQxXkCMDlXfPGw | Tim       |          702 |   35 | 2009-01-21 00:00:00 |
| -jt1ACMiZljnBFvS6RRvnA | L         |          696 |   10 | 2010-04-29 00:00:00 |
| -IgKkE8JvYNWeGu8ze4P8Q | Angela    |          694 |  101 | 2010-10-01 00:00:00 |
| -hxUwfo3cMnLTv-CAaP69A | Crissy    |          676 |   25 | 2008-07-31 00:00:00 |
| -H6cTbVxeIRYR-atxdielQ | Lyn       |          675 |   45 | 2009-11-07 00:00:00 |
+------------------------+-----------+--------------+------+---------------------+
(Output limit exceeded, 25 of 10000 total rows shown)

From the table above, we can see that Gerald has the highest number of reviews (2000) however he doesn't have the highest number of fans (253), so let us go ahead to analyse the table based on the number of fans in desc order.
	
SELECT id,
	   name,
	   review_count,
	   fans,
	   yelping_since
FROM user
ORDER BY fans DESC

+------------------------+-----------+--------------+------+---------------------+
| id                     | name      | review_count | fans | yelping_since       |
+------------------------+-----------+--------------+------+---------------------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |          609 |  503 | 2007-07-19 00:00:00 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |          968 |  497 | 2011-03-30 00:00:00 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |         1153 |  311 | 2012-11-27 00:00:00 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |         2000 |  253 | 2012-12-16 00:00:00 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |          930 |  173 | 2009-07-08 00:00:00 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |          813 |  159 | 2009-10-05 00:00:00 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |          377 |  133 | 2009-02-05 00:00:00 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |         1215 |  126 | 2015-02-19 00:00:00 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |          862 |  124 | 2012-04-05 00:00:00 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |          834 |  120 | 2007-08-14 00:00:00 |
| -B-QEUESGWHPE_889WJaeg | Mark      |          861 |  115 | 2009-05-31 00:00:00 |
| -DmqnhW4Omr3YhmnigaqHg | Tiffany   |          408 |  111 | 2008-10-28 00:00:00 |
| -cv9PPT7IHux7XUc9dOpkg | bernice   |          255 |  105 | 2007-08-29 00:00:00 |
| -DFCC64NXgqrxlO8aLU5rg | Roanna    |         1039 |  104 | 2006-03-28 00:00:00 |
| -IgKkE8JvYNWeGu8ze4P8Q | Angela    |          694 |  101 | 2010-10-01 00:00:00 |
| -K2Tcgh2EKX6e6HqqIrBIQ | .Hon      |         1246 |  101 | 2006-07-19 00:00:00 |
| -4viTt9UC44lWCFJwleMNQ | Ben       |          307 |   96 | 2007-03-10 00:00:00 |
| -3i9bhfvrM3F1wsC9XIB8g | Linda     |          584 |   89 | 2005-08-07 00:00:00 |
| -kLVfaJytOJY2-QdQoCcNQ | Christina |          842 |   85 | 2012-10-08 00:00:00 |
| -ePh4Prox7ZXnEBNGKyUEA | Jessica   |          220 |   84 | 2009-01-12 00:00:00 |
| -4BEUkLvHQntN6qPfKJP2w | Greg      |          408 |   81 | 2008-02-16 00:00:00 |
| -C-l8EHSLXtZZVfUAUhsPA | Nieves    |          178 |   80 | 2013-07-08 00:00:00 |
| -dw8f7FLaUmWR7bfJ_Yf0w | Sui       |          754 |   78 | 2009-09-07 00:00:00 |
| -8lbUNlXVSoXqaRRiHiSNg | Yuri      |         1339 |   76 | 2008-01-03 00:00:00 |
| -0zEEaDFIjABtPQni0XlHA | Nicole    |          161 |   73 | 2009-04-30 00:00:00 |
+------------------------+-----------+--------------+------+---------------------+
(Output limit exceeded, 25 of 10000 total rows shown)

So from the table above, we can see Amy has the highest number of fans of 503, while her number of reviews is 609, 
So therefore from the tables, posting reviews is important but its not a major determinant of getting more fans.

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: There are more reviews with the word "Love", there were 1,780 reviews with the word Love. While the word "hate" has 232 reviews.

	
	SQL code used to arrive at answer:
	For the word 'Love'

	SELECT COUNT(text)
	FROM review
	WHERE text LIKE '%love%'; 

	While for the word 'hate'

	SELECT COUNT(text)
	FROM review
	WHERE text LIKE '%hate%'; 

	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

	SELECT name, fans
	FROM user
	ORDER BY fans DESC
	LIMIT 10;
	
	
	Copy and Paste the Result Below:
+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?
   The 4-5 star group seems to have shorter hours then the 2-3 star group. However the difference in the hours were not much. Also the number of businesses returned were just 3, so it can't qualify 100% as a good sample size. 
	


ii. Do the two groups you chose to analyze have a different number of reviews?
    Yes, they have different number of reviews
    one of the 4-5 star group has a lot more reviews of 768 but then the other 4-5 star group has 168 reviews which is close to the same number of reviews as the 2-3 star group which is 123.
         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
     Based on the data, there should be more investments in restaurants in Las Vegas (except if the data is not 100% accurate)

SQL code used for analysis:

SELECT Business.Name, Business.review_count, hours.hours, Business.postal_code,
-- To split into category;
CASE WHEN Business.stars BETWEEN 2 AND 3 THEN '2-3 stars'
	 WHEN Business.stars BETWEEN 4 AND 5 THEN '4-5 stars'
END AS star_rating
-- Joining multiple tables
FROM Business INNER JOIN hours
ON Business.id = Hours.business_id
INNER JOIN Category
ON Business.id = Category.business_id
--filtering of the data
WHERE Business.city = 'Las Vegas' AND Category.Category like 'Restaurants'

		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
   According to the dataset, the number of businesses opened is 8,480; while the number of closed businesses is 1,520. 
   This is a very reasonable analysis and a working Economy, the number of operational Companies should be greater than the non-operational companies     
         
ii. Difference 2:
    The total reviews for businesses that are open is 269,300 and the average review is 31.757075471698112
    While the total reviews for closed businesses is 35,261 and the average review is 23.198026315789473
         
         
SQL code used for analysis:
SELECT COUNT(DISTINCT(id)),  AVG(review_count) AS Average_Reviews, SUM(review_count) AS Total_Reviews, AVG(stars) AS Average_star_ratings, is_open
		FROM business
		GROUP BY is_open
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
   Predicting the overall star rating for the businesses
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
    Overtime rating of businesses has been based on the quality of goods & services, But there are no information specific to that in the dataset.
    However, we can use the review_count column, with the assumption that businesses with nice service tend to receive more reviews. We can also use the text column from the review table. 
    Specifically, we can test whether reviews with words "hate" and "love" are good predictors of overall rating. 
    We would also need the stars column from the business table to confirm or reject this hypotheses.            
                  
                           
                  
iii. Output of your finished dataset:
         
+----------------------------------------+---------------+------------+---------------+
| name                                   | total_reviews | sentiments | overall_stars |
+----------------------------------------+---------------+------------+---------------+
| 4E Kennels                             |            24 | loved      |           5.0 |
| Alfred Angelo Bridal                   |            58 | loved      |           4.0 |
| Angelo's Pizza                         |           377 | loved      |           4.0 |
| AquaKnox                               |           423 | loved      |           4.0 |
| Au 14 Ouest Prince Arthur              |             4 | loved      |           5.0 |
| Au Kouign-Amann                        |           291 | loved      |           4.5 |
| AutoNation Nissan Tempe                |           157 | loved      |           3.0 |
| Avis                                   |             6 | hated      |           2.5 |
| Babe's Cabaret                         |            16 | hated      |           3.0 |
| Balance Hormone Center                 |             9 | loved      |           4.0 |
| Beaver Choice                          |           326 | loved      |           4.0 |
| Benkovitz Seafoods                     |            20 | loved      |           4.5 |
| Boba Tea House                         |           295 | loved      |           4.0 |
| Bootleggers Modern American Smokehouse |           431 | hated      |           4.0 |
| Bootleggers Modern American Smokehouse |           431 | loved      |           4.0 |
| Braddah's Island Style                 |           566 | loved      |           4.0 |
| Budget Rent A Car                      |             7 | hated      |           2.0 |
| Cabo's Cantina and Grill               |            24 | loved      |           3.5 |
| Camp Bow Wow Avondale                  |            79 | loved      |           5.0 |
| Capriotti's Sandwich Shop              |            57 | loved      |           3.0 |
| Cho Sun Ok                             |           195 | loved      |           4.0 |
| D & D Discount Motorcycles             |            11 | loved      |           5.0 |
| Delmonico Steakhouse                   |          1389 | hated      |           4.0 |
| Diablo's Cantina                       |          1084 | loved      |           3.0 |
| Dreamy Draw Recreation Area            |            45 | loved      |           4.0 |
+----------------------------------------+---------------+------------+---------------+
(Output limit exceeded, 25 of 140 total rows shown)   


iv. Provide the SQL code you used to create your final dataset:

SELECT 
    business.name, business.review_count AS 'total_reviews', 

    -- Classifying businesses that received reviews with terms "love" and "hate"
    CASE 
        WHEN review.text LIKE '%hate%' THEN 'hated'
        WHEN review.text LIKE '%love%' THEN 'loved'
    END AS 'sentiments',
    business.stars AS 'overall_stars'

-- Joining the business table and review table
FROM business INNER JOIN review 
ON business.id = review.business_id

-- Reviews WITHOUT the terms "hate" and "love" are ignored
WHERE sentiments IS NOT NULL

-- Sorting
ORDER BY name;
